--- a/drivers/usb/dwc3/dwc3-of-simple.c
+++ b/drivers/usb/dwc3/dwc3-of-simple.c
@@ -1,4 +1,3 @@
-// SPDX-License-Identifier: GPL-2.0
 /**
  * dwc3-of-simple.c - OF glue layer for simple integrations
  *
@@ -6,6 +5,15 @@
  *
  * Author: Felipe Balbi <balbi@ti.com>
  *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2  of
+ * the License as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
  * This is a combination of the old dwc3-qcom.c by Ivan T. Ivanov
  * <iivanov@mm-sol.com> and the original patch adding support for Xilinx' SoC
  * by Subbaraya Sundeep Bhatta <subbaraya.sundeep.bhatta@xilinx.com>
@@ -20,15 +28,11 @@
 #include <linux/of.h>
 #include <linux/of_platform.h>
 #include <linux/pm_runtime.h>
-#include <linux/reset.h>
 
 struct dwc3_of_simple {
 	struct device		*dev;
 	struct clk		**clks;
 	int			num_clocks;
-	struct reset_control	*resets;
-	bool			pulse_resets;
-	bool			need_reset;
 };
 
 static int dwc3_of_simple_clk_init(struct dwc3_of_simple *simple, int count)
@@ -85,7 +89,6 @@ static int dwc3_of_simple_probe(struct platform_device *pdev)
 
 	int			ret;
 	int			i;
-	bool			shared_resets = false;
 
 	simple = devm_kzalloc(dev, sizeof(*simple), GFP_KERNEL);
 	if (!simple)
@@ -94,40 +97,10 @@ static int dwc3_of_simple_probe(struct platform_device *pdev)
 	platform_set_drvdata(pdev, simple);
 	simple->dev = dev;
 
-	/*
-	 * Some controllers need to toggle the usb3-otg reset before trying to
-	 * initialize the PHY, otherwise the PHY times out.
-	 */
-	if (of_device_is_compatible(np, "rockchip,rk3399-dwc3"))
-		simple->need_reset = true;
-
-	if (of_device_is_compatible(np, "amlogic,meson-axg-dwc3") ||
-	    of_device_is_compatible(np, "amlogic,meson-gxl-dwc3")) {
-		shared_resets = true;
-		simple->pulse_resets = true;
-	}
-
-	simple->resets = of_reset_control_array_get(np, shared_resets, true);
-	if (IS_ERR(simple->resets)) {
-		ret = PTR_ERR(simple->resets);
-		dev_err(dev, "failed to get device resets, err=%d\n", ret);
-		return ret;
-	}
-
-	if (simple->pulse_resets) {
-		ret = reset_control_reset(simple->resets);
-		if (ret)
-			goto err_resetc_put;
-	} else {
-		ret = reset_control_deassert(simple->resets);
-		if (ret)
-			goto err_resetc_put;
-	}
-
 	ret = dwc3_of_simple_clk_init(simple, of_count_phandle_with_args(np,
 						"clocks", "#clock-cells"));
 	if (ret)
-		goto err_resetc_assert;
+		return ret;
 
 	ret = of_platform_populate(np, NULL, NULL, dev);
 	if (ret) {
@@ -136,7 +109,7 @@ static int dwc3_of_simple_probe(struct platform_device *pdev)
 			clk_put(simple->clks[i]);
 		}
 
-		goto err_resetc_assert;
+		return ret;
 	}
 
 	pm_runtime_set_active(dev);
@@ -144,14 +117,6 @@ static int dwc3_of_simple_probe(struct platform_device *pdev)
 	pm_runtime_get_sync(dev);
 
 	return 0;
-
-err_resetc_assert:
-	if (!simple->pulse_resets)
-		reset_control_assert(simple->resets);
-
-err_resetc_put:
-	reset_control_put(simple->resets);
-	return ret;
 }
 
 static int dwc3_of_simple_remove(struct platform_device *pdev)
@@ -160,18 +125,12 @@ static int dwc3_of_simple_remove(struct platform_device *pdev)
 	struct device		*dev = &pdev->dev;
 	int			i;
 
-	of_platform_depopulate(dev);
-
 	for (i = 0; i < simple->num_clocks; i++) {
 		clk_disable_unprepare(simple->clks[i]);
 		clk_put(simple->clks[i]);
 	}
-	simple->num_clocks = 0;
 
-	if (!simple->pulse_resets)
-		reset_control_assert(simple->resets);
-
-	reset_control_put(simple->resets);
+	of_platform_depopulate(dev);
 
 	pm_runtime_disable(dev);
 	pm_runtime_put_noidle(dev);
@@ -180,7 +139,8 @@ static int dwc3_of_simple_remove(struct platform_device *pdev)
 	return 0;
 }
 
-static int __maybe_unused dwc3_of_simple_runtime_suspend(struct device *dev)
+#ifdef CONFIG_PM
+static int dwc3_of_simple_runtime_suspend(struct device *dev)
 {
 	struct dwc3_of_simple	*simple = dev_get_drvdata(dev);
 	int			i;
@@ -191,7 +151,7 @@ static int __maybe_unused dwc3_of_simple_runtime_suspend(struct device *dev)
 	return 0;
 }
 
-static int __maybe_unused dwc3_of_simple_runtime_resume(struct device *dev)
+static int dwc3_of_simple_runtime_resume(struct device *dev)
 {
 	struct dwc3_of_simple	*simple = dev_get_drvdata(dev);
 	int			ret;
@@ -208,41 +168,19 @@ static int __maybe_unused dwc3_of_simple_runtime_resume(struct device *dev)
 
 	return 0;
 }
-
-static int __maybe_unused dwc3_of_simple_suspend(struct device *dev)
-{
-	struct dwc3_of_simple *simple = dev_get_drvdata(dev);
-
-	if (simple->need_reset)
-		reset_control_assert(simple->resets);
-
-	return 0;
-}
-
-static int __maybe_unused dwc3_of_simple_resume(struct device *dev)
-{
-	struct dwc3_of_simple *simple = dev_get_drvdata(dev);
-
-	if (simple->need_reset)
-		reset_control_deassert(simple->resets);
-
-	return 0;
-}
+#endif
 
 static const struct dev_pm_ops dwc3_of_simple_dev_pm_ops = {
-	SET_SYSTEM_SLEEP_PM_OPS(dwc3_of_simple_suspend, dwc3_of_simple_resume)
 	SET_RUNTIME_PM_OPS(dwc3_of_simple_runtime_suspend,
 			dwc3_of_simple_runtime_resume, NULL)
 };
 
 static const struct of_device_id of_dwc3_simple_match[] = {
+	{ .compatible = "qcom,dwc3" },
 	{ .compatible = "rockchip,rk3399-dwc3" },
 	{ .compatible = "xlnx,zynqmp-dwc3" },
 	{ .compatible = "cavium,octeon-7130-usb-uctl" },
 	{ .compatible = "sprd,sc9860-dwc3" },
-	{ .compatible = "amlogic,meson-axg-dwc3" },
-	{ .compatible = "amlogic,meson-gxl-dwc3" },
-	{ .compatible = "allwinner,sun50i-h6-dwc3" },
 	{ /* Sentinel */ }
 };
 MODULE_DEVICE_TABLE(of, of_dwc3_simple_match);
@@ -253,7 +191,6 @@ static struct platform_driver dwc3_of_simple_driver = {
 	.driver		= {
 		.name	= "dwc3-of-simple",
 		.of_match_table = of_dwc3_simple_match,
-		.pm	= &dwc3_of_simple_dev_pm_ops,
 	},
 };
 
